/*
Author:         Aaron Meche
Program:        Homework 2 - Worker Pay Calculator Driver
Description:    This File is the driver for the Worker pay calculator and bar chart generator programs.
Date Due:       02/05/19
Date Created:   01/24/19
Date Last Mod:  02/02/19

Input:          User inputs a paycode number to determine which calculation will take place 
				(1 for Manager, 2 for Hourly worker, 3 for Commission worker, 4 for Piece worker, 5 to 
				exit the loop and generate the bar chart).
Process:        The user inputs a paycode number 1-5, and the calculatePay function uses that paycode to
				determine the worker's payment. That number is then summed and stored in the worker class
				private variables and used to generate the asterisk bar chart. The bar chart is generated by
				divinding each total pay by 100, storing that number in a variable "bar," and then using a loop
				to display asterisks depending on the result of that integer division.
Output:         The switch statement will output the amount of pay per worker each time a pay is entered. After
				exiting the loop, the asterisk bar chart will be displayed.
Assumptions:    That the worker.h and worker.cpp files exist and are in the same folder.
*/

#include <iostream>					// libraries inclused, iomanip to display floats and worker.h to access the Worker class
#include <iomanip>
#include "worker.h"

using std::cout;					// namespaces included for displaying floats to the 100th decimal place
using std::cin;
using std::flush;
using std::endl;
using std::setprecision;
using std::fixed;

int main()
{
	Worker worker;					// create a Worker object
	int paycode = 0;				// initialize paycode variable
	while (paycode != 5)			// loops until the paycode == 5
	{
		cout << "Please enter worker paycode (1 for Manager, 2 for Hourly, 3 for Commission, 4 for Piece, 5 to exit): " << endl;	// prompts user to enter a paycode
		cin >> paycode;					// stores paycode
		worker.calculatePay(paycode);	// calls the calculatePay function
	}
	worker.callChart(worker);			// generates the bar chart
	system("pause");					// this code is to keep the console on the screen to view the results
}
